<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writeup on xbytemx blog</title>
    <link>https://xbytemx.github.io/tags/writeup/</link>
    <description>Recent content in Writeup on xbytemx blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Oct 2018 19:21:39 -0500</lastBuildDate>
    
	<atom:link href="https://xbytemx.github.io/tags/writeup/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flare-on 2014 - Challenge 03: Shellolololol</title>
      <link>https://xbytemx.github.io/post/flareon2014_-_challenge03/</link>
      <pubDate>Thu, 25 Oct 2018 19:21:39 -0500</pubDate>
      
      <guid>https://xbytemx.github.io/post/flareon2014_-_challenge03/</guid>
      <description>Bien comenzamos por descomprimir el challenge &amp;ldquo;C3.zip&amp;rdquo;, el cual esta protegido por la contraseña &amp;ldquo;malware&amp;rdquo;.
 Nota: Todos los archivos de challenge se encuentran dentro de un zip que se descarga aquí
 Como podemos ver, el challenge nos entrega unicamente el archivo &amp;ldquo;such_evil&amp;rdquo;, del cual no tenemos mucha información de momento. Tradicionalmente ejecutaria file o hasta un binwalk, pero para este caso nos iremos directo a analizar el archivo con DetectItEasy:</description>
    </item>
    
    <item>
      <title>Flare-on 2014 - Challenge 02: Javascrap</title>
      <link>https://xbytemx.github.io/post/flareon2014_-_challenge02/</link>
      <pubDate>Wed, 24 Oct 2018 15:16:00 -0500</pubDate>
      
      <guid>https://xbytemx.github.io/post/flareon2014_-_challenge02/</guid>
      <description>Bien comenzamos por descomprimir el challenge &amp;ldquo;C2.zip&amp;rdquo;, el cual esta protegido por la contraseña &amp;ldquo;malware&amp;rdquo;.
 Nota: Todos los archivos de challenge se encuentran dentro de un zip que se descarga aquí
 Al ver el contenido tenemos 2 archivos, una imagen y un archivo html:
Si analizamos el documento html, nos daremos cuenta que la pagina corresponde a la original del primer flare-on, por lo que el codigo en si, es igual que la pagina que estaba ejecutandose en dicho momento:</description>
    </item>
    
    <item>
      <title>Flare-On 2014 - Challenge 01: Bob Doge</title>
      <link>https://xbytemx.github.io/post/flareon2014_-_challenge01/</link>
      <pubDate>Sun, 21 Oct 2018 20:25:36 -0500</pubDate>
      
      <guid>https://xbytemx.github.io/post/flareon2014_-_challenge01/</guid>
      <description>Comenzamos por descargar el zip que contiene todos los challenges, para posteriormente ir a cada challenge y resolverlos.
Bien, despues de descargar el archivo general y descomprimirlo, debemos tener en nuestra carpeta un archivo llamnado C1.exe, el cual posteriormente lo pasamos por file y nos indica vía headers que se trata de un &amp;lsquo;PE32+ ejecutable con GUI x86_64&amp;rsquo;, por lo que probamos a ejecutarlo en un sandbox, ahí veremos que se trata de Microsoft Cabinet, que nos hace aceptar un EULA de Fireeye, por lo que extraemos su contenido usando cabextract:</description>
    </item>
    
  </channel>
</rss>