<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on xbytemx blog</title>
    <link>https://xbytemx.github.io/post/</link>
    <description>Recent content in Posts on xbytemx blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Oct 2018 18:42:38 -0500</lastBuildDate>
    
	<atom:link href="https://xbytemx.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reversing de IOLI Crackmes con Cutter - Crackme0x01</title>
      <link>https://xbytemx.github.io/post/ioli-crackmes-cutter_-_crackme0x01/</link>
      <pubDate>Tue, 23 Oct 2018 18:42:38 -0500</pubDate>
      
      <guid>https://xbytemx.github.io/post/ioli-crackmes-cutter_-_crackme0x01/</guid>
      <description>En el crackme anterior, exploramos un poco mas sobre las propiedades de Cutter para analizar el código, pero como tal tomamos los apuntes basados en las instrucciones que observamos directamente del desensamblador. En esta entrada aprenderemos un poco mas sobre como usar el desensamblador y el grafo de brincos condicionales.
Footprint Antes de llegar de lleno con el desensamblado del binario, analicemos si el siguiente crackme se parece al anterior.</description>
    </item>
    
    <item>
      <title>Flare-On 2014 - Challenge 01: Bob Doge</title>
      <link>https://xbytemx.github.io/post/flareon2014_-_challenge01/</link>
      <pubDate>Sun, 21 Oct 2018 20:25:36 -0500</pubDate>
      
      <guid>https://xbytemx.github.io/post/flareon2014_-_challenge01/</guid>
      <description>Bien, comenzamos por descargar y verificar el reto, el cual posteriormente lo pasamos por file y nos indica vía headers que se trata de un &amp;lsquo;PE32+ ejecutable con GUI x86_64&amp;rsquo;, por lo que probamos a ejecutarlo en un sandbox, ahí veremos que se trata de Microsoft Cabinet, que nos hace aceptar un EULA de Fireeye, por lo que extraemos su contenido usando cabextract:
xbytemx@laptop:~/flare-on2014$ cabextract C1.exe Extracting cabinet: C1.exe extracting Challenge1.</description>
    </item>
    
    <item>
      <title>Reversing de IOLI Crackmes con Cutter - Crackme0x00</title>
      <link>https://xbytemx.github.io/post/ioli-crackmes-cutter_-_crackme0x00/</link>
      <pubDate>Sat, 20 Oct 2018 00:07:58 -0500</pubDate>
      
      <guid>https://xbytemx.github.io/post/ioli-crackmes-cutter_-_crackme0x00/</guid>
      <description>En la entrada anterior, descargamos y revisamos muy por encima lo que Cutter nos presentaba con sus paneles y ventanas. Hoy daremos inicio al análisis del primer crackme de IOLI. Para la gente acostumbrada al Reversing, esto sera cosa de todos los días. Pero si eres nuevo, te invito a analizar a detalle lo que a continuación se presenta.
 Si estas completamente iniciando, te invito a leer el material (tutoriales, writeups, videos) que se ha escrito en la comunidad de CrackLatinos (CLS), es impresionante.</description>
    </item>
    
    <item>
      <title>Reversing de IOLI Crackmes con Cutter - Consiguiendo Cutter y los crackmes de IOLI</title>
      <link>https://xbytemx.github.io/post/ioli-crackmes-cutter_-_intro/</link>
      <pubDate>Thu, 18 Oct 2018 13:32:59 -0500</pubDate>
      
      <guid>https://xbytemx.github.io/post/ioli-crackmes-cutter_-_intro/</guid>
      <description>Ok, esta es una pequeña guía de como resolver los retos crackme de IOLI con cutter. La verdad me he divertido mucho usando este gui de radare2 y creo que merece la pena que veamos más como explotar la herramienta.
Lo primero es conseguir la herramienta y los crackmes, esto es bastante sencillo, solo accedemos a las siguientes urls:
Cutter: https://github.com/radareorg/cutter/releases
IOLI Crackmes: https://dustri.org/b/files/IOLI-crackme.tar.gz http://pof.eslack.org/tmp/IOLI-crackme.tar.gz
Yo he utilizado la versión 1.</description>
    </item>
    
  </channel>
</rss>